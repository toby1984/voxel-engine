package de.codesourcery.voxelengine.asseteditor;

import java.util.Arrays;

import org.apache.commons.lang3.StringUtils;

import de.codesourcery.voxelengine.engine.BlockSide;

public class BlockDefinition 
{
    public int blockType;
    public String name;

    public boolean emitsLight;
    public byte lightLevel;

    public boolean opaque;
    private boolean isAutoGenerated;

    public final BlockSideDefinition[] sides;

    public BlockDefinition() 
    {
        sides = new BlockSideDefinition[6];
        for ( int i = 0 ; i < 6 ; i++ ) {
            final BlockSide side = BlockSide.getByOrdinal( i );
            sides[ side.ordinal() ] = new BlockSideDefinition( side );
        }
    }
    
    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public boolean isValid(TextureResolver resolver) 
    {
        if ( StringUtils.isBlank( name ) ) {
            System.err.println("Block definition has blank name: "+this);
            return false;
        }
        if ( lightLevel < 0 ) {
            System.err.println("Block definition has invalid light level: "+this);
            return false;
        }
        for ( BlockSideDefinition def : sides ) {
            if ( ! def.isValid( this , resolver ) ) 
            {
                System.err.println("Block definition "+this+" has invalid side "+def);
                return false;
            }
        }
        return true;
    }

    public BlockDefinition(int blockType,String name) {
        this();
        this.blockType = blockType;
        this.name = name;
    }

    public void markAutoGenerated() {
        this.isAutoGenerated = true;
        Arrays.stream(sides).forEach( b -> b.markAutoGenerated() );
    }

    public BlockSideDefinition get(BlockSide side) {
        return sides[ side.ordinal() ];
    }

    @Override
    public String toString() {
        return "BlockDefinition [blockType=" + blockType + ", name=" + name
                + ", emitsLight=" + emitsLight + ", lightLevel=" + lightLevel
                + ", opaque=" + opaque + ", sides=" + Arrays.toString(sides)
                + "]";
    }
}
