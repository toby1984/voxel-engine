package de.codesourcery.voxelengine.asseteditor;

import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;

import de.codesourcery.voxelengine.asseteditor.TextureConfigPanel.ITableLayout;
import de.codesourcery.voxelengine.asseteditor.TextureConfigPanel.PanelTableLayout;
import de.codesourcery.voxelengine.engine.BlockSide;

public class BlockSideDefinitionPanel extends FormPanel<BlockSideDefinition> 
{
    private final JComboBox<BlockSide> side = new JComboBox<>( BlockSide.values() );
    
    private final TextureConfigPanel textureConfigPanel;
    
    public BlockSideDefinitionPanel() 
    {
        ITableLayout helper = new PanelTableLayout( this ); 
        
        // add fields
        side.setEditable( false );
        side.setEnabled(false);
        addInputField( "Side:" , side, helper );
        
        // add texture config panel
        textureConfigPanel = new TextureConfigPanel( helper );
        
        // add save button
        final JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout( new FlowLayout() );
        
        final JButton save = new JButton("Save");
        save.addActionListener( ev -> saveChanges() );
        buttonPanel.add(save);
        
        // add cancel button
        final JButton cancel = new JButton("Cancel");
        cancel.addActionListener( ev -> modelChanged() );
        buttonPanel.add( cancel );
        
        GridBagConstraints cnstrs = new GridBagConstraints();
        cnstrs.insets = new Insets(5,5,5,5);
        cnstrs.weightx = 0.5; cnstrs.weighty = 0;
        cnstrs.gridx = 0;
        cnstrs.gridheight = 1 ; cnstrs.gridwidth = 3;
        cnstrs.fill = GridBagConstraints.HORIZONTAL;
        helper.addLast( buttonPanel , cnstrs );
    }
    
    private <T extends JComponent> T addInputField(String label,T component,ITableLayout helper) 
    {
        GridBagConstraints cnstrs = new GridBagConstraints();
        cnstrs.insets = new Insets(5,5,5,5);
        cnstrs.weightx = 0.5; cnstrs.weighty = 0;
        cnstrs.gridx = 0;
        cnstrs.gridheight = 1 ; cnstrs.gridwidth = 1;
        cnstrs.fill = GridBagConstraints.HORIZONTAL;  
        cnstrs.anchor = GridBagConstraints.WEST;
        helper.addToRow( new JLabel(label) , cnstrs );
        
        cnstrs = new GridBagConstraints();
        cnstrs.insets = new Insets(5,5,5,5);
        cnstrs.weightx = 0.5; cnstrs.weighty = 0;
        cnstrs.gridx = 1;
        cnstrs.gridheight = 1 ; cnstrs.gridwidth = 2;
        cnstrs.fill = GridBagConstraints.HORIZONTAL;  
        cnstrs.anchor = GridBagConstraints.WEST;
        helper.addLast( component , cnstrs );        
        return component;
    }
    
    protected void modelChanged() 
    {
        if ( model == null ) 
        {
            side.setSelectedItem( null );
            textureConfigPanel.setModel( null );
        } else {
            side.setSelectedItem( model.side );
            textureConfigPanel.setModel( model.isAutoGenerated() ? null : model.texture );
        }
    }
    
    public void saveChanges() 
    {
        this.model.side = (BlockSide) side.getSelectedItem();
        this.textureConfigPanel.saveChanges();
        notifyChangeListener(false);
    }
    
    public void setTextureResolver(TextureResolver resolver) 
    {
        this.textureConfigPanel.setTextureResolver( resolver );
    }
}