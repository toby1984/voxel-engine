package de.codesourcery.voxelengine.asseteditor;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.OptionalInt;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;

import de.codesourcery.voxelengine.asseteditor.TextureAtlasConfig.Category;

public class AssetConfig 
{
    private final Map<Category,TextureAtlasConfig> atlasConfigs = new HashMap<>(); 
    
    public final List<BlockDefinition> blocks = new ArrayList<>();
    
    public final List<ItemDefinition> items = new ArrayList<>();

    public String baseDirectory;
    
    private final Map<SourceType,CodeGenConfig> codeOutputFiles = new HashMap<>();
    
    public static enum SourceType 
    {
        BLOCKS,
        ITEMS;
    }
    
    public static final class CodeGenConfig 
    {
        public final SourceType type;
        public String outputDirectory;
        public String packageName;
        public String className;
        
        public CodeGenConfig(SourceType type) {
            Validate.notNull(type, "type must not be NULL");
            this.type = type;
        }
        
        public File getFullPath() 
        {
            if ( StringUtils.isBlank( outputDirectory ) || StringUtils.isBlank( className ) ) {
                return null;
            }
            final File folder = new File( outputDirectory , packageName == null ? "" : packageName.replace('.',File.separatorChar) );
            return new File( folder , className+".java" );
        }
        
        public boolean isValid() {
            return StringUtils.isNoneBlank( outputDirectory , className );
        }
    }
    
    @FunctionalInterface
    public interface BlockVisitor 
    {
        public void visit(BlockDefinition bd,boolean isFirst,boolean isLast);
    }
    
    @FunctionalInterface
    public interface ItemVisitor 
    {
        public void visit(ItemDefinition bd,boolean isFirst,boolean isLast);
    }    
    
    public AssetConfig() 
    {
        Arrays.stream( SourceType.values() ).forEach( type -> 
        {
            codeOutputFiles.put( type , new CodeGenConfig(type) );
        });
        for ( Category cat : TextureAtlasConfig.Category.values() ) {
            atlasConfigs.put( cat , new TextureAtlasConfig(cat) );
        }
        
        final BlockDefinition bd = new BlockDefinition();
        bd.name="Air";
        bd.opaque = false;
        bd.markAutoGenerated();
        add( bd );
    }
    
    public BlockDefinition getBlockDefinition(int bt) {
        return blocks.stream().filter( b -> b.blockType == bt ).findFirst().orElse( null );
    }
    
    public void visitBlocksByAscendingTypeId(BlockVisitor def) 
    {
        final List<BlockDefinition> sorted = new ArrayList<>( this.blocks );
        final Comparator<BlockDefinition> order = (a,b) -> Integer.compare( a.blockType , b.blockType );
        Collections.sort( sorted , order );
        for ( int i = 0 , len = sorted.size() ; i < len ; i++ ) 
        {
            def.visit( sorted.get(i) , i == 0 , (i+1) >= len );
        }
    }
    
    public void visitItemsByAscendingTypeId(ItemVisitor def) 
    {
        final List<ItemDefinition> sorted = new ArrayList<>( this.items );
        final Comparator<ItemDefinition> order = (a,b) -> Integer.compare( a.itemId, b.itemId);
        Collections.sort( sorted , order );
        for ( int i = 0 , len = sorted.size() ; i < len ; i++ ) 
        {
            def.visit( sorted.get(i) , i == 0 , (i+1) >= len );
        }
    }
    
    public boolean isValid(TextureResolver resolver) 
    {
        return hasValidBlockConfigurations(resolver) && hasValidItemConfigurations(resolver);
    }
    
    private boolean hasValidItemConfigurations(TextureResolver resolver) 
    {
        boolean valid = true;

        valid &= items.stream().map( it -> 
        { 
            try {
                return it.isValid( resolver );
            } catch (Exception e) 
            {
                System.err.println("Invalid item config: "+it);
                e.printStackTrace();
                return false;
            } 
        } ).allMatch( isValid -> isValid );
        
        // check for unique item names
        if ( valid ) {
            valid &= items.stream().map( it -> it.name ).collect(Collectors.toSet()).size() == items.size();
        }
        return valid;
    }
    
    private boolean hasValidBlockConfigurations(TextureResolver resolver) 
    {
        final TextureAtlasConfig blockAtlas = textureAtlasConfig( Category.BLOCKS );
        if ( blockAtlas.textureAtlasSize > 0 && blockAtlas.textureSize > 0 && StringUtils.isNotBlank( baseDirectory ) ) 
        {
            for ( BlockDefinition bl : blocks ) 
            {
                if ( ! bl.isValid( resolver ) ) 
                {
                    System.err.println("=== Block config has invalid blocks: "+this);
                    return false;
                }
            }
            
            final Set<Integer> ids = new HashSet<>();
            
            if ( ! blocks.stream().allMatch( bd -> 
            {
                if ( ! ids.add( bd.blockType ) ) {
                    System.err.println("=== Duplicate block ID: "+bd);
                    return false;
                }
                return true;
            }) ) 
            {
                return false;
            }
            
            final OptionalInt minValue = ids.stream().mapToInt( bd -> bd.intValue() ).min();
            final OptionalInt maxValue = ids.stream().mapToInt( bd -> bd.intValue() ).max();
            
            if ( minValue.isPresent() ) 
            {
                if ( minValue.getAsInt() != 0 ) 
                {
                    System.err.println("=== Lowest block type ID must be 0");
                    return false;
                }
                for ( int i = minValue.getAsInt() , max = maxValue.getAsInt() ; i <= max ; i++ ) {
                    if ( ! ids.contains( Integer.valueOf( i ) ) ) {
                        System.err.println("=== Block type IDs must not have gaps: "+this);
                        return false;
                    }
                }
            }
            return true;
        }
        System.err.println("=== BlockConfig has invalid fields: "+this);
        return false;
    }
    
    public int nextAvailableBlockTypeId() 
    {
        int i = 0;
outer:
        while ( true ) 
        {
            for ( BlockDefinition def : blocks ) {
                if ( def.blockType == i ) 
                {
                    i++;
                    continue outer;
                }
            }
            return i;
        }
    }
    
    public int nextAvailableItemId() 
    {
        int i = 0;
outer:
        while ( true ) 
        {
            for ( ItemDefinition def : items ) {
                if ( def.itemId == i ) 
                {
                    i++;
                    continue outer;
                }
            }
            return i;
        }
    }    
    
    public TextureAtlasConfig blockAtlas() {
        return textureAtlasConfig( Category.BLOCKS );
    }
    
    public TextureAtlasConfig itemAtlas() {
        return textureAtlasConfig( Category.ITEMS );
    }    
    
    public TextureAtlasConfig textureAtlasConfig(Category category) {
        return atlasConfigs.get( category );
    }
    
    public void add(BlockDefinition def) 
    {
        this.blocks.add( def );
    }
    
    public void add(ItemDefinition def) {
        this.items.add( def );
    }

    @Override
    public String toString() {
        return "AssetConfig [ atlasConfigs="+atlasConfigs+" ]";
    }
    
    public List<TextureAtlasConfig> getTextureAtlasConfigs() 
    {
        return new ArrayList<>( this.atlasConfigs.values() );
    }
    
    public List<CodeGenConfig> getCodeGenConfigs() {
        return new ArrayList<>( codeOutputFiles.values() );
    }
    
    public CodeGenConfig getCodeGenConfig(SourceType cat) {
        return codeOutputFiles.get(cat);
    }    
}