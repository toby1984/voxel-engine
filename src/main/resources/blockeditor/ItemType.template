package ${PACKAGE};

import com.badlogic.gdx.math.Vector2;

/**
 * AUTO-GENERATED FILE, DO NOT EDIT.
 *
 * Edit BlockType.template file instead !!
 *
 * @author tobias.gierke@code-sourcery.de
 */
public final class ${CLASSNAME} 
{
    ${ITEM_TYPE_IDS}
    
    public static final int MAX_ITEM_TYPE = ${MAX_ITEM_TYPE};
    
    private static final float[] uv = new float[] 
    {
      ${UV_COORDINATES} 
    };
    
    /**
     * Returns the min/max texture UV coordinates for a given item type.
     * 
     * @param itemType
     * @param min where min(uv) should be stored
     * @param max where max(uv) should be stored
     */        
    public static void getUVMinMax(int itemType,Vector2 min,Vector2 max) 
    {
        final int ptr = itemType * 4;
        min.x = uv[ ptr   ];
        min.y = uv[ ptr+1 ];
        max.x = uv[ ptr+2 ];
        max.y = uv[ ptr+3 ];
    }    
    
    public static boolean canCreateBlock(int itemType) 
    {
        switch( itemType ) 
        {
          ${CAN_CREATE_BLOCK}
          default:
            throw new IllegalArgumentException("Invalid item type id #"+itemType);
        }
    }    
    
    public static boolean canDestroyBlock(int itemType) 
    {
        switch( itemType ) 
        {
          ${CAN_DESTROY_BLOCK}
          default:
            throw new IllegalArgumentException("Invalid item type id #"+itemType);
        }
    }    
    
    public static int getCreatedBlockType(int itemType) 
    {
        switch( itemType ) 
        {
          ${CREATED_BLOCK_TYPE}
          default:
            throw new IllegalArgumentException("Invalid item type id #"+itemType);
        }
    }     
    
    public static String getDisplayName(int itemType) 
    {
        switch( itemType ) 
        {
          ${DISPLAY_NAME}
          default:
            throw new IllegalArgumentException("Invalid item type id #"+itemType);
        }    
    }
}