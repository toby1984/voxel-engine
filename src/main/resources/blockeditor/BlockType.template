package ${PACKAGE};

import com.badlogic.gdx.math.Vector2;
import de.codesourcery.voxelengine.engine.BlockSide;

/**
 * AUTO-GENERATED FILE, DO NOT EDIT.
 *
 * Edit BlockType.template file instead !!
 *
 * @author tobias.gierke@code-sourcery.de
 */
public final class ${CLASSNAME} 
{
    private static final int UV_SIZE_PER_BLOCK_IN_FLOATS = 6*4;
    
    ${BLOCK_TYPE_IDS}
    
    public static final int MAX_BLOCK_TYPE = ${MAX_BLOCK_TYPE};
    
    private static final float[] uv = new float[] 
    {
      ${UV_COORDINATES} 
    };
    
    /**
     * Returns the min/max texture UV coordinates for a given block type and block side.
     * 
     * @param bt
     * @param side
     * @param min
     * @param max
     */        
    public static void getUVMinMax(int bt,BlockSide side,Vector2 min,Vector2 max) 
    {
        final int ptr = bt * UV_SIZE_PER_BLOCK_IN_FLOATS + side.ordinal()*4;
        min.x = uv[ ptr   ];
        min.y = uv[ ptr+1 ];
        max.x = uv[ ptr+2 ];
        max.y = uv[ ptr+3 ];
    }
    
    public static boolean isSolidBlock(int bt) 
    {
        switch(bt) {
            ${IS_SOLID_BLOCK_SWITCH}
            default:
                throw new RuntimeException("Unhandled case: "+bt);
        }
    }
    
    public static boolean isNonSolidBlock(int bt) {
        return ! isSolidBlock( bt );
    }    
    
    public static boolean emitsLight(int bt) 
    {
        switch(bt) {
            ${EMITS_LIGHT_SWITCH}
            default:
                throw new RuntimeException("Unhandled case: "+bt);
        }            
    }
    
    public static byte getEmittedLightLevel(int bt) 
    {
        switch(bt) 
        {
            ${EMITTED_LIGHT_LEVEL_SWITCH}
            default:
                throw new RuntimeException("Unhandled case: "+bt);
        }    
    }
}